from . import async_manager as async_manager, base_server as base_server, exceptions as exceptions, packet as packet
from _typeshed import Incomplete

task_reference_holder: Incomplete

class AsyncServer(base_server.BaseServer):
    def __init__(self, client_manager=None, logger: bool = False, json=None, async_handlers: bool = True, namespaces=None, **kwargs) -> None: ...
    def is_asyncio_based(self): ...
    def attach(self, app, socketio_path: str = 'socket.io') -> None: ...
    async def emit(self, event, data=None, to=None, room=None, skip_sid=None, namespace=None, callback=None, ignore_queue: bool = False) -> None: ...
    async def send(self, data, to=None, room=None, skip_sid=None, namespace=None, callback=None, ignore_queue: bool = False) -> None: ...
    async def call(self, event, data=None, to=None, sid=None, namespace=None, timeout: int = 60, ignore_queue: bool = False): ...
    async def enter_room(self, sid, room, namespace=None) -> None: ...
    async def leave_room(self, sid, room, namespace=None) -> None: ...
    async def close_room(self, room, namespace=None) -> None: ...
    async def get_session(self, sid, namespace=None): ...
    async def save_session(self, sid, session, namespace=None) -> None: ...
    server: Incomplete
    sid: Incomplete
    namespace: Incomplete
    def session(self, sid, namespace=None): ...
    async def disconnect(self, sid, namespace=None, ignore_queue: bool = False) -> None: ...
    async def shutdown(self) -> None: ...
    async def handle_request(self, *args, **kwargs): ...
    def start_background_task(self, target, *args, **kwargs): ...
    async def sleep(self, seconds: int = 0): ...
    def instrument(self, auth=None, mode: str = 'development', read_only: bool = False, server_id=None, namespace: str = '/admin', server_stats_interval: int = 2): ...
