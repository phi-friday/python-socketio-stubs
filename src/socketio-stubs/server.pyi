from . import base_server as base_server, exceptions as exceptions, packet as packet
from _typeshed import Incomplete

default_logger: Incomplete

class Server(base_server.BaseServer):
    def emit(self, event, data=None, to=None, room=None, skip_sid=None, namespace=None, callback=None, ignore_queue: bool = False) -> None: ...
    def send(self, data, to=None, room=None, skip_sid=None, namespace=None, callback=None, ignore_queue: bool = False) -> None: ...
    def call(self, event, data=None, to=None, sid=None, namespace=None, timeout: int = 60, ignore_queue: bool = False): ...
    def enter_room(self, sid, room, namespace=None) -> None: ...
    def leave_room(self, sid, room, namespace=None) -> None: ...
    def close_room(self, room, namespace=None) -> None: ...
    def get_session(self, sid, namespace=None): ...
    def save_session(self, sid, session, namespace=None) -> None: ...
    server: Incomplete
    sid: Incomplete
    namespace: Incomplete
    def session(self, sid, namespace=None): ...
    def disconnect(self, sid, namespace=None, ignore_queue: bool = False) -> None: ...
    def shutdown(self) -> None: ...
    def handle_request(self, environ, start_response): ...
    def start_background_task(self, target, *args, **kwargs): ...
    def sleep(self, seconds: int = 0): ...
    def instrument(self, auth=None, mode: str = 'development', read_only: bool = False, server_id=None, namespace: str = '/admin', server_stats_interval: int = 2): ...
