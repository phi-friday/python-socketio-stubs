from . import base_client as base_client, exceptions as exceptions, packet as packet
from _typeshed import Incomplete

class Client(base_client.BaseClient):
    connection_url: Incomplete
    connection_headers: Incomplete
    connection_auth: Incomplete
    connection_transports: Incomplete
    connection_namespaces: Incomplete
    socketio_path: Incomplete
    namespaces: Incomplete
    connected: bool
    def connect(self, url, headers={}, auth=None, transports=None, namespaces=None, socketio_path: str = 'socket.io', wait: bool = True, wait_timeout: int = 1, retry: bool = False) -> None: ...
    def wait(self) -> None: ...
    def emit(self, event, data=None, namespace=None, callback=None) -> None: ...
    def send(self, data, namespace=None, callback=None) -> None: ...
    def call(self, event, data=None, namespace=None, timeout: int = 60): ...
    def disconnect(self) -> None: ...
    def shutdown(self) -> None: ...
    def start_background_task(self, target, *args, **kwargs): ...
    def sleep(self, seconds: int = 0): ...
