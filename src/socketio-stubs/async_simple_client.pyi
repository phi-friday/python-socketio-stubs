from _typeshed import Incomplete
from socketio import AsyncClient as AsyncClient
from socketio.exceptions import DisconnectedError as DisconnectedError, SocketIOError as SocketIOError, TimeoutError as TimeoutError

class AsyncSimpleClient:
    client_class = AsyncClient
    client_args: Incomplete
    client_kwargs: Incomplete
    client: Incomplete
    namespace: str
    connected_event: Incomplete
    connected: bool
    input_event: Incomplete
    input_buffer: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    async def connect(self, url, headers={}, auth=None, transports=None, namespace: str = '/', socketio_path: str = 'socket.io', wait_timeout: int = 5) -> None: ...
    @property
    def sid(self): ...
    @property
    def transport(self): ...
    async def emit(self, event, data=None): ...
    async def call(self, event, data=None, timeout: int = 60): ...
    async def receive(self, timeout=None): ...
    async def disconnect(self) -> None: ...
    async def __aenter__(self): ...
    async def __aexit__(self, exc_type, exc_val, exc_tb) -> None: ...
